apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: backend-app-<ENVIRONMENT>
  name: <APP_NAME>
  labels:
    name: <APP_NAME>
spec:
  replicas: 1
  selector:
    matchLabels:
      name: <APP_NAME>
  template:
    metadata:
      labels:
        name: <APP_NAME>
    spec:
      nodeSelector:
        doks.digitalocean.com/node-pool: <POOL>
      imagePullSecrets:
        - name: do-registry-secret
      containers:
        - name: <APP_NAME>
          image: <IMAGE>
          imagePullPolicy: Always
          command: ["python", "main.py"]
          resources:
            requests:
              memory: "85Mi"
              cpu: "5m"
            limits:
              cpu: 500m
              memory: 512Mi
          env:
            - name: ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: <CONFIGMAP>
                  key: ENVIRONMENT
            - name: AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-secret-<ENVIRONMENT>
                  key: AWS_SECRET_KEY
            - name: AWS_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: aws-secret-<ENVIRONMENT>
                  key: AWS_CLIENT_ID
            - name: AWS_REGION_NAME
              valueFrom:
                secretKeyRef:
                  name: aws-secret-<ENVIRONMENT>
                  key: AWS_REGION_NAME
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: <CONFIGMAP>
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: <CONFIGMAP>
                  key: REDIS_PORT
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret-<ENVIRONMENT>
                  key: REDIS_PASSWORD
          ports:
            - containerPort: 8000
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: <APP_NAME>
  name: <APP_NAME>
  namespace: backend-app-<ENVIRONMENT>
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    name: <APP_NAME>

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: <APP_NAME>
  namespace: backend-app-<ENVIRONMENT>
spec:
  maxReplicas: 10
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 1100
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: <APP_NAME>

---
apiVersion: v1
data:
  ENVIRONMENT: "test"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
kind: ConfigMap
metadata:
  name: <CONFIGMAP>
  namespace: backend-app-<ENVIRONMENT>

---

apiVersion: batch/v1
kind: CronJob
metadata:
  name: <APP_NAME>-cronjob
  namespace: backend-app-<ENVIRONMENT>
  labels:
    app: <APP_NAME>
    component: producer
spec:
  schedule: "55 23 31 2 *" # n√£o executa
  jobTemplate:
    spec:
      backoffLimit: 1
      template:
        metadata:
          labels:
            app: <APP_NAME>
            component: producer
        spec:
          restartPolicy: Never
          imagePullSecrets:
            - name: do-registry-secret
          containers:
            - name: <APP_NAME>-cronjob
              image: <IMAGE>
              imagePullPolicy: Always
              command: [ "python", "src/application/cronjobs/calculate_median.py" ]
              env:
                - name: ENVIRONMENT
                  valueFrom:
                    configMapKeyRef:
                      name: <CONFIGMAP>
                      key: ENVIRONMENT
                - name: AWS_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret-<ENVIRONMENT>
                      key: AWS_SECRET_KEY
                - name: AWS_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret-<ENVIRONMENT>
                      key: AWS_CLIENT_ID
                - name: AWS_REGION_NAME
                  valueFrom:
                    secretKeyRef:
                      name: aws-secret-<ENVIRONMENT>
                      key: AWS_REGION_NAME
                - name: REDIS_HOST
                  valueFrom:
                    configMapKeyRef:
                      name: <CONFIGMAP>
                      key: REDIS_HOST
                - name: REDIS_PORT
                  valueFrom:
                    configMapKeyRef:
                      name: <CONFIGMAP>
                      key: REDIS_PORT
                - name: REDIS_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: redis-secret-<ENVIRONMENT>
                      key: REDIS_PASSWORD